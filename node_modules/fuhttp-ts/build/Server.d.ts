/// <reference types="node" />
import { Route } from './Route';
import * as net from 'net';
import * as http from 'http';
import * as formidable from 'formidable';
import { IMiddleware } from './middlewares/IMiddleware';
export interface IBodyRequest extends http.IncomingMessage {
    body?: string | {};
    fields?: formidable.Fields;
    files?: formidable.Files;
    contentType?: string;
}
/**
 * The HTTP-server class for receiving and responding to HTTP-requests
 */
export declare class Server {
    private static defaultMiddleWares;
    /**
     * http node server instance
     */
    private server;
    /**
     * Port number to listen for
     */
    private port;
    /**
     * hostname/ip in which `server` should accept connections to
     * Leave as null to listen to all IP-adresses. Example usage:
     * using the node-http server as a Reverse Proxy
     */
    private hostname;
    /**
     * Status whether the http-server is started and accepts
     * connections or not
     */
    private connected;
    /**
     * The route added to the http-server, which is recognized
     * and parsed for each http-request by the requested url
     */
    private route;
    /**
     * Middlewares added to the http-server. All middlewares
     * are run before a route is triggered, which can be used
     * to alter the request and response http-objects
     */
    private _middlewares;
    /**
     * Error functions for custom-handling of errors. To set
     * error functions see all "on*" methods. If no error
     * functions are set, the defaults are used
     */
    private _errorFunctions;
    /**
     * Creates an instance of Server.
     */
    constructor(port: number, host?: string);
    private onServerRequest;
    private onRequestServerError;
    private onResponseServerError;
    private getRequestWithBody;
    private parseRequestContentType;
    private parseFormData;
    private parseRequestBody;
    /**
     * Look up route based on request url.
     * Will load any middlewares if defined.
     * If no routes are found, the `ERROR_KEY_NOTFOUND` error functions will be called
     *
     * @param request
     * @param response
     */
    private routeLookup;
    private setDefaultErrorResponses;
    private printServerInfo;
    /**
     * Whether the server is listening for connections or not. Will
     * only be true as long as the `listen` method is called
     */
    readonly isListening: boolean;
    /**
     * Set functions to run on triggered events
     *
     * @param event to listen for
     * @param func function to run on event triggered
     * @returns Whether event added successfully for listening
     * @throws Error if the provided event argument cannot be added as eventListener
     */
    on(event: string, func: (...args: any[]) => void): boolean;
    /**
     * Function to run on a "clientError"
     * https://nodejs.org/api/http.html#http_event_clienterror
     */
    onClientError: (error: Error, socket: net.Socket) => void;
    /**
     * Function to run when the server closes for new connections
     * https://nodejs.org/api/http.html#http_event_close
     */
    onClose: () => void;
    /**
     * Function to run when "upgrade" emitted by client
     * https://nodejs.org/api/http.html#http_event_upgrade_1
     */
    onUpgrade: () => void;
    /**
     * Function to run if a request throws an error
     */
    onRequestError: (error: any, response: http.ServerResponse) => void;
    /**
     * Function to run if a response throws an error
     */
    onResponseError: (error: any, response: http.ServerResponse) => void;
    /**
     * Function to run if a route is not found (404 http method)
     */
    onNotFoundError: (response: http.ServerResponse) => void;
    /**
     * Function to run if a request provides too much data
     */
    onOverflowError: (response: http.ServerResponse) => void;
    onException: (error: Error, response: http.ServerResponse) => void;
    onMethodNotAllowed: (supportedMethods: string[], response: http.ServerResponse) => void;
    /**
     * Adds a new route for the http-server for accepting http-requests
     *
     * @param routeName
     * @param route object to add
     */
    add(routeName: string, route: Route): void;
    /**
     * Appends a middleware
     *
     * @param middleware to be added
     */
    use(middleware: IMiddleware): void;
    /**
     * Retrieve all registered middlewares
     */
    readonly middlewares: IMiddleware[];
    /**
     * Retrieve the function to call when a route is not found
     * Used by "Route"
     */
    readonly notfound: Function;
    close(): void;
    /**
     * Start the http-server, for accepting incomming connections on the
     * given port and hostname
     * @throws Error If no Routes are added before starting HTTP-server
     */
    listen(): void;
}
