/**
 * fuhttp-ts 1.2.1 <https://github.com/fosenutvikling/fuHTTP-ts#readme>
 * DefaultResponse.js
 *
 * a HTTP-server written in TypeScript using Node.js
 *
 * Copyright (c) 2018 Jonas Kirkemyr, Fosen-Utvikling AS (http://fosen-utvikling.no), contributors
 * Licensed under the MIT license.
 */
 "use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const HttpResponse_1 = require("./HttpResponse");
exports.DefaultErrorResponse = (error, response) => {
    response.setHeader('Content-Type', 'text/html');
    response.write('Error: ' + error);
    HttpResponse_1.HttpResponse.BadRequest(response, 'The Request Error function is not set. It can be set using the appropriate function (onRequestError)');
};
exports.DefaultNoResponseErrorResponse = (error, response) => {
    response.setHeader('Content-Type', 'text/html');
    response.statusCode = 444; // NGINX specific error code
    response.statusMessage = 'No Response';
    response.write('The Response Error function is not set. It can be set using the appropriate function (onResponseError)');
    response.end();
};
exports.DefaultNotFoundErrorResponse = (response) => {
    response.setHeader('Content-Type', 'text/html');
    HttpResponse_1.HttpResponse.NotFound(response, 'The Not Found Error function is not set. It can be set using the appropriate function (onNotFoundError)');
};
exports.DefaultLargeEntityErrorResponse = (response) => {
    response.setHeader('Content-Type', 'text/html');
    response.statusCode = 413;
    response.statusMessage = 'Request Entity Too Large';
    response.write('The Overflow Error function is not set. It can be set using the appropriate function (onOverflowError)');
    response.end();
};
exports.DefaultMethodNotAllowedResponse = (supportedMethods, response) => HttpResponse_1.HttpResponse.MethodNotAllowed(response, supportedMethods);
//# sourceMappingURL=DefaultResponse.js.map