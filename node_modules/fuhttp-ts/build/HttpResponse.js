/**
 * fuhttp-ts 1.2.1 <https://github.com/fosenutvikling/fuHTTP-ts#readme>
 * HttpResponse.js
 *
 * a HTTP-server written in TypeScript using Node.js
 *
 * Copyright (c) 2018 Jonas Kirkemyr, Fosen-Utvikling AS (http://fosen-utvikling.no), contributors
 * Licensed under the MIT license.
 */
 "use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Mix of different standarized HTTP-Response Codes
 * The 200-code is dropped, as it's returned as default in NodeJS
 *
 * The http.ServerResponse is required for each method, to assign the statusCode and statusMessage to the current response
 * If a responseText is appended as a parameter, the request will be ended as well
 */
class HttpResponse {
    static EndResponse(responseText, res) {
        res.write(responseText);
        res.end();
    }
    static Created(res, location = null, responseText = null) {
        res.statusCode = 201;
        res.statusMessage = 'Created';
        // Whether location of newly created resource should be added to header
        if (location)
            res.setHeader('Location', location);
        if (responseText)
            HttpResponse.EndResponse(responseText, res);
    }
    static NoContent(res, responseText = null) {
        res.statusCode = 204;
        res.statusMessage = 'No Content';
        HttpResponse.EndResponse(responseText, res);
    }
    static BadRequest(res, responseText = null) {
        res.statusCode = 400;
        res.statusMessage = 'Bad Request';
        if (responseText)
            HttpResponse.EndResponse(responseText, res);
    }
    static Unauthorized(res, responseText = null) {
        res.statusCode = 401;
        res.statusMessage = 'Unauthorized';
        if (responseText)
            HttpResponse.EndResponse(responseText, res);
    }
    static Forbidden(res, responseText = null) {
        res.statusCode = 403;
        res.statusMessage = 'Forbidden';
        if (responseText)
            HttpResponse.EndResponse(responseText, res);
    }
    static NotFound(res, responseText = null) {
        res.statusCode = 404;
        res.statusMessage = 'Not Found';
        if (responseText)
            HttpResponse.EndResponse(responseText, res);
    }
    static MethodNotAllowed(res, supportedMethods) {
        res.statusCode = 405;
        res.statusMessage = 'Method not Allowed';
        HttpResponse.EndResponse(supportedMethods.join(','), res);
    }
    static ServerError(res, responseText = null) {
        res.statusCode = 500;
        res.statusMessage = 'Internal Server Error';
        if (responseText)
            HttpResponse.EndResponse(responseText, res);
    }
}
exports.HttpResponse = HttpResponse;
//# sourceMappingURL=HttpResponse.js.map