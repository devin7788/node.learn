"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidSSLCertificateError = exports.SSLHandshakeFailedError = exports.ATimeoutOccurredError = exports.OriginIsUnreachableError = exports.ConnectionTimedOutError = exports.WebServerIsDownError = exports.UnknownError = exports.NetworkAuthenticationRequiredError = exports.NotExtendedError = exports.BandwidthLimitExceededError = exports.LoopDetectedError = exports.InsufficientStorageError = exports.VariantAlsoNegotiatesError = exports.HTTPVersionNotSupportedError = exports.GatewayTimeoutError = exports.ServiceUnavailableError = exports.BadGatewayError = exports.NotImplementedError = exports.InternalServerError = exports.ClientClosedRequestError = exports.UnavailableForLegalReasonsError = exports.RetryWithError = exports.RequestHeaderFieldsTooLargeError = exports.TooManyRequestsError = exports.PreconditionRequiredError = exports.UpgradeRequiredError = exports.FailedDependencyError = exports.LockedError = exports.UnprocessableEntityError = exports.MisdirectedRequestError = exports.AuthenticationTimeoutError = exports.IAmATeapotError = exports.ExpectationFailedError = exports.RangeNotSatisfiableError = exports.UnsupportedMediaTypeError = exports.URITooLongError = exports.PayloadTooLargeError = exports.PreconditionFailedError = exports.LengthRequiredError = exports.GoneError = exports.ConflictError = exports.RequestTimeoutError = exports.ProxyAuthenticationRequiredError = exports.NotAcceptableError = exports.MethodNotAllowedError = exports.NotFoundError = exports.ForbiddenError = exports.PaymentRequiredError = exports.UnauthorizedError = exports.BadRequestError = exports.ExtendedError = void 0;
class ExtendedError extends Error {
    constructor(message = '', statusCode = 500, name = '') {
        super(message);
        this.message = message;
        this.statusCode = statusCode;
        this.name = name;
    }
    toJSON() {
        return {
            name: this.name,
            status: this.statusCode,
            message: this.message
        };
    }
}
exports.ExtendedError = ExtendedError;
class BadRequestError extends ExtendedError {
    constructor(message = 'BadRequest') {
        super(message, 400, 'BadRequestError');
    }
}
exports.BadRequestError = BadRequestError;
class UnauthorizedError extends ExtendedError {
    constructor(message = 'Unauthorized') {
        super(message, 401, 'UnauthorizedError');
    }
}
exports.UnauthorizedError = UnauthorizedError;
class PaymentRequiredError extends ExtendedError {
    constructor(message = 'PaymentRequired') {
        super(message, 402, 'PaymentRequiredError');
    }
}
exports.PaymentRequiredError = PaymentRequiredError;
class ForbiddenError extends ExtendedError {
    constructor(message = 'Forbidden') {
        super(message, 403, 'ForbiddenError');
    }
}
exports.ForbiddenError = ForbiddenError;
class NotFoundError extends ExtendedError {
    constructor(message = 'NotFound') {
        super(message, 404, 'NotFoundError');
    }
}
exports.NotFoundError = NotFoundError;
class MethodNotAllowedError extends ExtendedError {
    constructor(message = 'MethodNotAllowed') {
        super(message, 405, 'MethodNotAllowedError');
    }
}
exports.MethodNotAllowedError = MethodNotAllowedError;
class NotAcceptableError extends ExtendedError {
    constructor(message = 'NotAcceptable') {
        super(message, 406, 'NotAcceptableError');
    }
}
exports.NotAcceptableError = NotAcceptableError;
class ProxyAuthenticationRequiredError extends ExtendedError {
    constructor(message = 'ProxyAuthenticationRequired') {
        super(message, 407, 'ProxyAuthenticationRequiredError');
    }
}
exports.ProxyAuthenticationRequiredError = ProxyAuthenticationRequiredError;
class RequestTimeoutError extends ExtendedError {
    constructor(message = 'RequestTimeout') {
        super(message, 408, 'RequestTimeoutError');
    }
}
exports.RequestTimeoutError = RequestTimeoutError;
class ConflictError extends ExtendedError {
    constructor(message = 'Conflict') {
        super(message, 409, 'ConflictError');
    }
}
exports.ConflictError = ConflictError;
class GoneError extends ExtendedError {
    constructor(message = 'Gone') {
        super(message, 410, 'GoneError');
    }
}
exports.GoneError = GoneError;
class LengthRequiredError extends ExtendedError {
    constructor(message = 'LengthRequired') {
        super(message, 411, 'LengthRequiredError');
    }
}
exports.LengthRequiredError = LengthRequiredError;
class PreconditionFailedError extends ExtendedError {
    constructor(message = 'PreconditionFailed') {
        super(message, 412, 'PreconditionFailedError');
    }
}
exports.PreconditionFailedError = PreconditionFailedError;
class PayloadTooLargeError extends ExtendedError {
    constructor(message = 'PayloadTooLarge') {
        super(message, 413, 'PayloadTooLargeError');
    }
}
exports.PayloadTooLargeError = PayloadTooLargeError;
class URITooLongError extends ExtendedError {
    constructor(message = 'URITooLong') {
        super(message, 414, 'URITooLongError');
    }
}
exports.URITooLongError = URITooLongError;
class UnsupportedMediaTypeError extends ExtendedError {
    constructor(message = 'UnsupportedMediaType') {
        super(message, 415, 'UnsupportedMediaTypeError');
    }
}
exports.UnsupportedMediaTypeError = UnsupportedMediaTypeError;
class RangeNotSatisfiableError extends ExtendedError {
    constructor(message = 'RangeNotSatisfiable') {
        super(message, 416, 'RangeNotSatisfiableError');
    }
}
exports.RangeNotSatisfiableError = RangeNotSatisfiableError;
class ExpectationFailedError extends ExtendedError {
    constructor(message = 'ExpectationFailed') {
        super(message, 417, 'ExpectationFailedError');
    }
}
exports.ExpectationFailedError = ExpectationFailedError;
class IAmATeapotError extends ExtendedError {
    constructor(message = 'IAmATeapot') {
        super(message, 418, 'IAmATeapotError');
    }
}
exports.IAmATeapotError = IAmATeapotError;
class AuthenticationTimeoutError extends ExtendedError {
    constructor(message = 'AuthenticationTimeout') {
        super(message, 419, 'AuthenticationTimeoutError');
    }
}
exports.AuthenticationTimeoutError = AuthenticationTimeoutError;
class MisdirectedRequestError extends ExtendedError {
    constructor(message = 'MisdirectedRequest') {
        super(message, 421, 'MisdirectedRequestError');
    }
}
exports.MisdirectedRequestError = MisdirectedRequestError;
class UnprocessableEntityError extends ExtendedError {
    constructor(message = 'UnprocessableEntity') {
        super(message, 422, 'UnprocessableEntityError');
    }
}
exports.UnprocessableEntityError = UnprocessableEntityError;
class LockedError extends ExtendedError {
    constructor(message = 'Locked') {
        super(message, 423, 'LockedError');
    }
}
exports.LockedError = LockedError;
class FailedDependencyError extends ExtendedError {
    constructor(message = 'FailedDependency') {
        super(message, 424, 'FailedDependencyError');
    }
}
exports.FailedDependencyError = FailedDependencyError;
class UpgradeRequiredError extends ExtendedError {
    constructor(message = 'UpgradeRequired') {
        super(message, 426, 'UpgradeRequiredError');
    }
}
exports.UpgradeRequiredError = UpgradeRequiredError;
class PreconditionRequiredError extends ExtendedError {
    constructor(message = 'PreconditionRequired') {
        super(message, 428, 'PreconditionRequiredError');
    }
}
exports.PreconditionRequiredError = PreconditionRequiredError;
class TooManyRequestsError extends ExtendedError {
    constructor(message = 'TooManyRequests') {
        super(message, 429, 'TooManyRequestsError');
    }
}
exports.TooManyRequestsError = TooManyRequestsError;
class RequestHeaderFieldsTooLargeError extends ExtendedError {
    constructor(message = 'RequestHeaderFieldsTooLarge') {
        super(message, 431, 'RequestHeaderFieldsTooLargeError');
    }
}
exports.RequestHeaderFieldsTooLargeError = RequestHeaderFieldsTooLargeError;
class RetryWithError extends ExtendedError {
    constructor(message = 'RetryWith') {
        super(message, 449, 'RetryWithError');
    }
}
exports.RetryWithError = RetryWithError;
class UnavailableForLegalReasonsError extends ExtendedError {
    constructor(message = 'UnavailableForLegalReasons') {
        super(message, 451, 'UnavailableForLegalReasonsError');
    }
}
exports.UnavailableForLegalReasonsError = UnavailableForLegalReasonsError;
class ClientClosedRequestError extends ExtendedError {
    constructor(message = 'ClientClosedRequest') {
        super(message, 499, 'ClientClosedRequestError');
    }
}
exports.ClientClosedRequestError = ClientClosedRequestError;
class InternalServerError extends ExtendedError {
    constructor(message = 'InternalServer') {
        super(message, 500, 'InternalServerError');
    }
}
exports.InternalServerError = InternalServerError;
class NotImplementedError extends ExtendedError {
    constructor(message = 'NotImplemented') {
        super(message, 501, 'NotImplementedError');
    }
}
exports.NotImplementedError = NotImplementedError;
class BadGatewayError extends ExtendedError {
    constructor(message = 'BadGateway') {
        super(message, 502, 'BadGatewayError');
    }
}
exports.BadGatewayError = BadGatewayError;
class ServiceUnavailableError extends ExtendedError {
    constructor(message = 'ServiceUnavailable') {
        super(message, 503, 'ServiceUnavailableError');
    }
}
exports.ServiceUnavailableError = ServiceUnavailableError;
class GatewayTimeoutError extends ExtendedError {
    constructor(message = 'GatewayTimeout') {
        super(message, 504, 'GatewayTimeoutError');
    }
}
exports.GatewayTimeoutError = GatewayTimeoutError;
class HTTPVersionNotSupportedError extends ExtendedError {
    constructor(message = 'HTTPVersionNotSupported') {
        super(message, 505, 'HTTPVersionNotSupportedError');
    }
}
exports.HTTPVersionNotSupportedError = HTTPVersionNotSupportedError;
class VariantAlsoNegotiatesError extends ExtendedError {
    constructor(message = 'VariantAlsoNegotiates') {
        super(message, 506, 'VariantAlsoNegotiatesError');
    }
}
exports.VariantAlsoNegotiatesError = VariantAlsoNegotiatesError;
class InsufficientStorageError extends ExtendedError {
    constructor(message = 'InsufficientStorage') {
        super(message, 507, 'InsufficientStorageError');
    }
}
exports.InsufficientStorageError = InsufficientStorageError;
class LoopDetectedError extends ExtendedError {
    constructor(message = 'LoopDetected') {
        super(message, 508, 'LoopDetectedError');
    }
}
exports.LoopDetectedError = LoopDetectedError;
class BandwidthLimitExceededError extends ExtendedError {
    constructor(message = 'BandwidthLimitExceeded') {
        super(message, 509, 'BandwidthLimitExceededError');
    }
}
exports.BandwidthLimitExceededError = BandwidthLimitExceededError;
class NotExtendedError extends ExtendedError {
    constructor(message = 'NotExtended') {
        super(message, 510, 'NotExtendedError');
    }
}
exports.NotExtendedError = NotExtendedError;
class NetworkAuthenticationRequiredError extends ExtendedError {
    constructor(message = 'NetworkAuthenticationRequired') {
        super(message, 511, 'NetworkAuthenticationRequiredError');
    }
}
exports.NetworkAuthenticationRequiredError = NetworkAuthenticationRequiredError;
class UnknownError extends ExtendedError {
    constructor(message = 'Unknown') {
        super(message, 520, 'UnknownError');
    }
}
exports.UnknownError = UnknownError;
class WebServerIsDownError extends ExtendedError {
    constructor(message = 'WebServerIsDown') {
        super(message, 521, 'WebServerIsDownError');
    }
}
exports.WebServerIsDownError = WebServerIsDownError;
class ConnectionTimedOutError extends ExtendedError {
    constructor(message = 'ConnectionTimedOut') {
        super(message, 522, 'ConnectionTimedOutError');
    }
}
exports.ConnectionTimedOutError = ConnectionTimedOutError;
class OriginIsUnreachableError extends ExtendedError {
    constructor(message = 'OriginIsUnreachable') {
        super(message, 523, 'OriginIsUnreachableError');
    }
}
exports.OriginIsUnreachableError = OriginIsUnreachableError;
class ATimeoutOccurredError extends ExtendedError {
    constructor(message = 'ATimeoutOccurred') {
        super(message, 524, 'ATimeoutOccurredError');
    }
}
exports.ATimeoutOccurredError = ATimeoutOccurredError;
class SSLHandshakeFailedError extends ExtendedError {
    constructor(message = 'SSLHandshakeFailed') {
        super(message, 525, 'SSLHandshakeFailedError');
    }
}
exports.SSLHandshakeFailedError = SSLHandshakeFailedError;
class InvalidSSLCertificateError extends ExtendedError {
    constructor(message = 'InvalidSSLCertificate') {
        super(message, 526, 'InvalidSSLCertificateError');
    }
}
exports.InvalidSSLCertificateError = InvalidSSLCertificateError;
