export declare class ExtendedError extends Error {
    message: string;
    statusCode: number;
    name: string;
    constructor(message?: string, statusCode?: number, name?: string);
    toJSON(): {
        name: string;
        status: number;
        message: string;
    };
}
export declare class BadRequestError extends ExtendedError {
    constructor(message?: string);
}
export declare class UnauthorizedError extends ExtendedError {
    constructor(message?: string);
}
export declare class PaymentRequiredError extends ExtendedError {
    constructor(message?: string);
}
export declare class ForbiddenError extends ExtendedError {
    constructor(message?: string);
}
export declare class NotFoundError extends ExtendedError {
    constructor(message?: string);
}
export declare class MethodNotAllowedError extends ExtendedError {
    constructor(message?: string);
}
export declare class NotAcceptableError extends ExtendedError {
    constructor(message?: string);
}
export declare class ProxyAuthenticationRequiredError extends ExtendedError {
    constructor(message?: string);
}
export declare class RequestTimeoutError extends ExtendedError {
    constructor(message?: string);
}
export declare class ConflictError extends ExtendedError {
    constructor(message?: string);
}
export declare class GoneError extends ExtendedError {
    constructor(message?: string);
}
export declare class LengthRequiredError extends ExtendedError {
    constructor(message?: string);
}
export declare class PreconditionFailedError extends ExtendedError {
    constructor(message?: string);
}
export declare class PayloadTooLargeError extends ExtendedError {
    constructor(message?: string);
}
export declare class URITooLongError extends ExtendedError {
    constructor(message?: string);
}
export declare class UnsupportedMediaTypeError extends ExtendedError {
    constructor(message?: string);
}
export declare class RangeNotSatisfiableError extends ExtendedError {
    constructor(message?: string);
}
export declare class ExpectationFailedError extends ExtendedError {
    constructor(message?: string);
}
export declare class IAmATeapotError extends ExtendedError {
    constructor(message?: string);
}
export declare class AuthenticationTimeoutError extends ExtendedError {
    constructor(message?: string);
}
export declare class MisdirectedRequestError extends ExtendedError {
    constructor(message?: string);
}
export declare class UnprocessableEntityError extends ExtendedError {
    constructor(message?: string);
}
export declare class LockedError extends ExtendedError {
    constructor(message?: string);
}
export declare class FailedDependencyError extends ExtendedError {
    constructor(message?: string);
}
export declare class UpgradeRequiredError extends ExtendedError {
    constructor(message?: string);
}
export declare class PreconditionRequiredError extends ExtendedError {
    constructor(message?: string);
}
export declare class TooManyRequestsError extends ExtendedError {
    constructor(message?: string);
}
export declare class RequestHeaderFieldsTooLargeError extends ExtendedError {
    constructor(message?: string);
}
export declare class RetryWithError extends ExtendedError {
    constructor(message?: string);
}
export declare class UnavailableForLegalReasonsError extends ExtendedError {
    constructor(message?: string);
}
export declare class ClientClosedRequestError extends ExtendedError {
    constructor(message?: string);
}
export declare class InternalServerError extends ExtendedError {
    constructor(message?: string);
}
export declare class NotImplementedError extends ExtendedError {
    constructor(message?: string);
}
export declare class BadGatewayError extends ExtendedError {
    constructor(message?: string);
}
export declare class ServiceUnavailableError extends ExtendedError {
    constructor(message?: string);
}
export declare class GatewayTimeoutError extends ExtendedError {
    constructor(message?: string);
}
export declare class HTTPVersionNotSupportedError extends ExtendedError {
    constructor(message?: string);
}
export declare class VariantAlsoNegotiatesError extends ExtendedError {
    constructor(message?: string);
}
export declare class InsufficientStorageError extends ExtendedError {
    constructor(message?: string);
}
export declare class LoopDetectedError extends ExtendedError {
    constructor(message?: string);
}
export declare class BandwidthLimitExceededError extends ExtendedError {
    constructor(message?: string);
}
export declare class NotExtendedError extends ExtendedError {
    constructor(message?: string);
}
export declare class NetworkAuthenticationRequiredError extends ExtendedError {
    constructor(message?: string);
}
export declare class UnknownError extends ExtendedError {
    constructor(message?: string);
}
export declare class WebServerIsDownError extends ExtendedError {
    constructor(message?: string);
}
export declare class ConnectionTimedOutError extends ExtendedError {
    constructor(message?: string);
}
export declare class OriginIsUnreachableError extends ExtendedError {
    constructor(message?: string);
}
export declare class ATimeoutOccurredError extends ExtendedError {
    constructor(message?: string);
}
export declare class SSLHandshakeFailedError extends ExtendedError {
    constructor(message?: string);
}
export declare class InvalidSSLCertificateError extends ExtendedError {
    constructor(message?: string);
}
