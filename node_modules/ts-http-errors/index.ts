export class ExtendedError extends Error {
	constructor(public message: string = '', public statusCode: number = 500, public name: string = '') {
		super(message)
	}
	toJSON() {
		return {
			name: this.name,
			status: this.statusCode,
			message: this.message
		}
	}
}

export class BadRequestError extends ExtendedError {
	constructor(message: string = 'BadRequest') {
		super(message, 400, 'BadRequestError')
	}
}

export class UnauthorizedError extends ExtendedError {
	constructor(message: string = 'Unauthorized') {
		super(message, 401, 'UnauthorizedError')
	}
}

export class PaymentRequiredError extends ExtendedError {
	constructor(message: string = 'PaymentRequired') {
		super(message, 402, 'PaymentRequiredError')
	}
}

export class ForbiddenError extends ExtendedError {
	constructor(message: string = 'Forbidden') {
		super(message, 403, 'ForbiddenError')
	}
}

export class NotFoundError extends ExtendedError {
	constructor(message: string = 'NotFound') {
		super(message, 404, 'NotFoundError')
	}
}

export class MethodNotAllowedError extends ExtendedError {
	constructor(message: string = 'MethodNotAllowed') {
		super(message, 405, 'MethodNotAllowedError')
	}
}

export class NotAcceptableError extends ExtendedError {
	constructor(message: string = 'NotAcceptable') {
		super(message, 406, 'NotAcceptableError')
	}
}

export class ProxyAuthenticationRequiredError extends ExtendedError {
	constructor(message: string = 'ProxyAuthenticationRequired') {
		super(message, 407, 'ProxyAuthenticationRequiredError')
	}
}

export class RequestTimeoutError extends ExtendedError {
	constructor(message: string = 'RequestTimeout') {
		super(message, 408, 'RequestTimeoutError')
	}
}

export class ConflictError extends ExtendedError {
	constructor(message: string = 'Conflict') {
		super(message, 409, 'ConflictError')
	}
}

export class GoneError extends ExtendedError {
	constructor(message: string = 'Gone') {
		super(message, 410, 'GoneError')
	}
}

export class LengthRequiredError extends ExtendedError {
	constructor(message: string = 'LengthRequired') {
		super(message, 411, 'LengthRequiredError')
	}
}

export class PreconditionFailedError extends ExtendedError {
	constructor(message: string = 'PreconditionFailed') {
		super(message, 412, 'PreconditionFailedError')
	}
}

export class PayloadTooLargeError extends ExtendedError {
	constructor(message: string = 'PayloadTooLarge') {
		super(message, 413, 'PayloadTooLargeError')
	}
}

export class URITooLongError extends ExtendedError {
	constructor(message: string = 'URITooLong') {
		super(message, 414, 'URITooLongError')
	}
}

export class UnsupportedMediaTypeError extends ExtendedError {
	constructor(message: string = 'UnsupportedMediaType') {
		super(message, 415, 'UnsupportedMediaTypeError')
	}
}

export class RangeNotSatisfiableError extends ExtendedError {
	constructor(message: string = 'RangeNotSatisfiable') {
		super(message, 416, 'RangeNotSatisfiableError')
	}
}

export class ExpectationFailedError extends ExtendedError {
	constructor(message: string = 'ExpectationFailed') {
		super(message, 417, 'ExpectationFailedError')
	}
}

export class IAmATeapotError extends ExtendedError {
	constructor(message: string = 'IAmATeapot') {
		super(message, 418, 'IAmATeapotError')
	}
}

export class AuthenticationTimeoutError extends ExtendedError {
	constructor(message: string = 'AuthenticationTimeout') {
		super(message, 419, 'AuthenticationTimeoutError')
	}
}

export class MisdirectedRequestError extends ExtendedError {
	constructor(message: string = 'MisdirectedRequest') {
		super(message, 421, 'MisdirectedRequestError')
	}
}

export class UnprocessableEntityError extends ExtendedError {
	constructor(message: string = 'UnprocessableEntity') {
		super(message, 422, 'UnprocessableEntityError')
	}
}

export class LockedError extends ExtendedError {
	constructor(message: string = 'Locked') {
		super(message, 423, 'LockedError')
	}
}

export class FailedDependencyError extends ExtendedError {
	constructor(message: string = 'FailedDependency') {
		super(message, 424, 'FailedDependencyError')
	}
}

export class UpgradeRequiredError extends ExtendedError {
	constructor(message: string = 'UpgradeRequired') {
		super(message, 426, 'UpgradeRequiredError')
	}
}

export class PreconditionRequiredError extends ExtendedError {
	constructor(message: string = 'PreconditionRequired') {
		super(message, 428, 'PreconditionRequiredError')
	}
}

export class TooManyRequestsError extends ExtendedError {
	constructor(message: string = 'TooManyRequests') {
		super(message, 429, 'TooManyRequestsError')
	}
}

export class RequestHeaderFieldsTooLargeError extends ExtendedError {
	constructor(message: string = 'RequestHeaderFieldsTooLarge') {
		super(message, 431, 'RequestHeaderFieldsTooLargeError')
	}
}

export class RetryWithError extends ExtendedError {
	constructor(message: string = 'RetryWith') {
		super(message, 449, 'RetryWithError')
	}
}

export class UnavailableForLegalReasonsError extends ExtendedError {
	constructor(message: string = 'UnavailableForLegalReasons') {
		super(message, 451, 'UnavailableForLegalReasonsError')
	}
}

export class ClientClosedRequestError extends ExtendedError {
	constructor(message: string = 'ClientClosedRequest') {
		super(message, 499, 'ClientClosedRequestError')
	}
}

export class InternalServerError extends ExtendedError {
	constructor(message: string = 'InternalServer') {
		super(message, 500, 'InternalServerError')
	}
}

export class NotImplementedError extends ExtendedError {
	constructor(message: string = 'NotImplemented') {
		super(message, 501, 'NotImplementedError')
	}
}

export class BadGatewayError extends ExtendedError {
	constructor(message: string = 'BadGateway') {
		super(message, 502, 'BadGatewayError')
	}
}

export class ServiceUnavailableError extends ExtendedError {
	constructor(message: string = 'ServiceUnavailable') {
		super(message, 503, 'ServiceUnavailableError')
	}
}

export class GatewayTimeoutError extends ExtendedError {
	constructor(message: string = 'GatewayTimeout') {
		super(message, 504, 'GatewayTimeoutError')
	}
}

export class HTTPVersionNotSupportedError extends ExtendedError {
	constructor(message: string = 'HTTPVersionNotSupported') {
		super(message, 505, 'HTTPVersionNotSupportedError')
	}
}

export class VariantAlsoNegotiatesError extends ExtendedError {
	constructor(message: string = 'VariantAlsoNegotiates') {
		super(message, 506, 'VariantAlsoNegotiatesError')
	}
}

export class InsufficientStorageError extends ExtendedError {
	constructor(message: string = 'InsufficientStorage') {
		super(message, 507, 'InsufficientStorageError')
	}
}

export class LoopDetectedError extends ExtendedError {
	constructor(message: string = 'LoopDetected') {
		super(message, 508, 'LoopDetectedError')
	}
}

export class BandwidthLimitExceededError extends ExtendedError {
	constructor(message: string = 'BandwidthLimitExceeded') {
		super(message, 509, 'BandwidthLimitExceededError')
	}
}

export class NotExtendedError extends ExtendedError {
	constructor(message: string = 'NotExtended') {
		super(message, 510, 'NotExtendedError')
	}
}

export class NetworkAuthenticationRequiredError extends ExtendedError {
	constructor(message: string = 'NetworkAuthenticationRequired') {
		super(message, 511, 'NetworkAuthenticationRequiredError')
	}
}

export class UnknownError extends ExtendedError {
	constructor(message: string = 'Unknown') {
		super(message, 520, 'UnknownError')
	}
}

export class WebServerIsDownError extends ExtendedError {
	constructor(message: string = 'WebServerIsDown') {
		super(message, 521, 'WebServerIsDownError')
	}
}

export class ConnectionTimedOutError extends ExtendedError {
	constructor(message: string = 'ConnectionTimedOut') {
		super(message, 522, 'ConnectionTimedOutError')
	}
}

export class OriginIsUnreachableError extends ExtendedError {
	constructor(message: string = 'OriginIsUnreachable') {
		super(message, 523, 'OriginIsUnreachableError')
	}
}

export class ATimeoutOccurredError extends ExtendedError {
	constructor(message: string = 'ATimeoutOccurred') {
		super(message, 524, 'ATimeoutOccurredError')
	}
}

export class SSLHandshakeFailedError extends ExtendedError {
	constructor(message: string = 'SSLHandshakeFailed') {
		super(message, 525, 'SSLHandshakeFailedError')
	}
}

export class InvalidSSLCertificateError extends ExtendedError {
	constructor(message: string = 'InvalidSSLCertificate') {
		super(message, 526, 'InvalidSSLCertificateError')
	}
}

