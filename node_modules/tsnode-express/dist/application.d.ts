import { IRouterHandler, IRouterMatcher } from 'express';
import Injector from './injector';
import { IController, Type, IAuthProvider, IResponse, IProviderDefinition, IRequest } from './interfaces';
import { AuthOptions, ConfigProvider } from './helpers';
declare class Application {
    protected httpDisabled: boolean;
    readonly Injector: Injector;
    protected static _instance: Application;
    protected _injector: Injector;
    express: any;
    protected router: any;
    protected enableAthorization: boolean;
    protected authorizationOptions: AuthOptions;
    protected configProvider: ConfigProvider;
    protected _controllers: Map<string, IController>;
    protected pendingInjections: Map<string, Promise<any>>;
    use: IRouterHandler<Application> & IRouterMatcher<Application>;
    protected authorizationProvider?: IProviderDefinition<IAuthProvider>;
    protected autoInjections: string[];
    protected plugins: string[];
    constructor(cb?: Function);
    readonly controllers: Map<string, IController>;
    registerModule(...args: any[]): Application;
    protected authMiddleware(req: IRequest, res: IResponse, next: Function): Promise<void>;
    useAuthorizationProvider<T>(provider: Type<T>, cb?: Function): Application;
    useConfig(cb: Function): Application;
    protected health(): void;
    handleNotFound(): void;
    handleError(err: any, ...args: any[]): any;
    protected buildController(definition: IController, name: string): void;
    autoResolve<T>(target: Type<T>): Application;
    usePlugin(plugin: any): Application;
    inject<T>(name: string, cb: Function): Application;
    inject<T>(instance: T): Application;
    disableHttp(): this;
    start(cb: Function): Promise<void>;
}
export default Application;
