"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class AuthOptions {
    constructor() {
        this.authorizationHeader = 'authorization';
        this.authorizationQueryParam = 'access_token';
        this.authorizationBodyField = 'accessToken';
    }
}
exports.AuthOptions = AuthOptions;
class ConfigProvider {
    constructor(config) {
        Object.assign(this, { logLevels: [], printStack: false }, config);
    }
}
exports.ConfigProvider = ConfigProvider;
class RequestArguments {
    constructor({ body, params, query, auth }) {
        this.body = body;
        this.params = params;
        this.auth = auth;
        this.query = query;
    }
}
exports.RequestArguments = RequestArguments;
class AuthTarget {
    constructor(req, controllers) {
        controllers.forEach((controller, name) => {
            if (controller.basePath == req.baseUrl) {
                this.controller = name;
                this.basePath = controller.basePath;
                this.role = controller.role;
                this.roles = [...[this.role],
                    ...controller.roles || []];
            }
        });
        const controller = controllers.get(this.controller);
        controller.routes.forEach((route, path) => {
            if (path == req.route.path) {
                this.path = path;
                this.method = Object.keys(route).find((method) => method == req.route.stack[0].method);
            }
        });
        const methodDefinition = controller.routes.get(this.path);
        this.functionName = methodDefinition[this.method].origin && methodDefinition[this.method].origin.name ||
            methodDefinition[this.method].before && methodDefinition[this.method].before.name ||
            methodDefinition[this.method].after && methodDefinition[this.method].after.name;
        this.role = methodDefinition[this.method].role || this.role;
        this.roles = [...[methodDefinition[this.method].role],
            ...methodDefinition[this.method].roles || [],
            ...this.roles].filter((role) => role)
            .filter((role, i, roles) => roles.indexOf(role) == i);
    }
    get fullPath() {
        return `${this.basePath}${this.path}`;
    }
}
exports.AuthTarget = AuthTarget;
